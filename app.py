"""
üöÄ MEGA TELEGRAM BOT - Enterprise Edition
–í—Å–µ —Ç–æ–ø–æ–≤—ã–µ —Ñ–∏—á–∏ –≤ –æ–¥–Ω–æ–º –±–æ—Ç–µ!
"""

import os
import io
import logging
import json
import asyncio
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
from pathlib import Path
import base64
import tempfile

# Telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    CallbackQueryHandler, filters, ContextTypes,
    ConversationHandler
)

# AI –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
from groq import Groq  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π AI
import openai  # –î–ª—è DALL-E –∏ Whisper
from gtts import gTTS  # Text-to-Speech
import speech_recognition as sr  # Speech-to-Text
from pydub import AudioSegment  # –ê—É–¥–∏–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è

# –í–µ–±-–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞
from flask import Flask, render_template_string, jsonify, request, session, redirect, url_for
from flask_cors import CORS
import threading
import secrets

# PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak, Image
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
import sqlite3
from datetime import datetime
import pandas as pd

# –£—Ç–∏–ª–∏—Ç—ã
from PIL import Image as PILImage
import requests
import hashlib
import uuid
from functools import wraps
import schedule
import pytz

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
class Config:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"""
    
    # Telegram
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
    
    # AI APIs
    GROQ_API_KEY = os.getenv("GROQ_API_KEY")  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≥–æ–ª–æ—Å–∞
    
    # Admin
    ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
    ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD", "admin123")
    SECRET_KEY = os.getenv("SECRET_KEY", secrets.token_hex(16))
    
    # Business
    BUSINESS_NAME = os.getenv("BUSINESS_NAME", "MEGA AI Bot")
    
    # Web Panel
    WEB_PORT = int(os.getenv("WEB_PORT", "5000"))
    
    # Database
    DB_PATH = "bot_database.db"
    
    # File paths
    EXPORTS_DIR = Path("exports")
    VOICE_DIR = Path("voice_messages")
    IMAGES_DIR = Path("generated_images")
    
    # Create directories
    for dir_path in [EXPORTS_DIR, VOICE_DIR, IMAGES_DIR]:
        dir_path.mkdir(exist_ok=True)
    
    # AI Models
    TEXT_MODEL = "llama-3.3-70b-versatile"  # Groq
    IMAGE_MODEL = "dall-e-3"  # OpenAI
    VOICE_MODEL = "whisper-1"  # OpenAI

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
class Database:
    """SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
    
    def __init__(self):
        self.conn = sqlite3.connect(Config.DB_PATH, check_same_thread=False)
        self.create_tables()
        
    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
        cursor = self.conn.cursor()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                language_code TEXT,
                is_premium BOOLEAN DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_active TIMESTAMP
            )
        ''')
        
        # –°–æ–æ–±—â–µ–Ω–∏—è
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                message_type TEXT,
                content TEXT,
                ai_response TEXT,
                tokens_used INTEGER,
                response_time REAL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )
        ''')
        
        # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS generated_images (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                prompt TEXT,
                image_url TEXT,
                file_path TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )
        ''')
        
        # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS voice_messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                file_id TEXT,
                transcription TEXT,
                duration INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )
        ''')
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS analytics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                metric_name TEXT,
                metric_value REAL,
                date DATE DEFAULT CURRENT_DATE
            )
        ''')
        
        self.conn.commit()
    
    def add_user(self, user_data: dict):
        """–î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO users 
            (user_id, username, first_name, last_name, language_code, last_active)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (
            user_data['id'],
            user_data.get('username'),
            user_data.get('first_name'),
            user_data.get('last_name'),
            user_data.get('language_code'),
            datetime.now()
        ))
        self.conn.commit()
    
    def log_message(self, user_id: int, message_type: str, content: str, 
                    ai_response: str = None, tokens: int = 0, response_time: float = 0):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT INTO messages 
            (user_id, message_type, content, ai_response, tokens_used, response_time)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, message_type, content, ai_response, tokens, response_time))
        self.conn.commit()
    
    def get_chat_history(self, user_id: int, limit: int = 100) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT content, ai_response, created_at 
            FROM messages 
            WHERE user_id = ? 
            ORDER BY created_at DESC 
            LIMIT ?
        ''', (user_id, limit))
        return cursor.fetchall()
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        cursor = self.conn.cursor()
        
        stats = {}
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM users")
        stats['total_users'] = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM messages")
        stats['total_messages'] = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM generated_images")
        stats['total_images'] = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM voice_messages")
        stats['total_voice'] = cursor.fetchone()[0]
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        cursor.execute('''
            SELECT COUNT(DISTINCT user_id) FROM messages 
            WHERE DATE(created_at) = DATE('now')
        ''')
        stats['active_today'] = cursor.fetchone()[0]
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        cursor.execute('''
            SELECT u.username, COUNT(m.id) as msg_count
            FROM users u
            JOIN messages m ON u.user_id = m.user_id
            GROUP BY u.user_id
            ORDER BY msg_count DESC
            LIMIT 5
        ''')
        stats['top_users'] = cursor.fetchall()
        
        return stats

# ==================== AI –ú–û–î–£–õ–ò ====================
class AIManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ—Ö AI —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def __init__(self, db: Database):
        self.db = db
        self.groq_client = Groq(api_key=Config.GROQ_API_KEY) if Config.GROQ_API_KEY else None
        self.openai_client = openai if Config.OPENAI_API_KEY else None
        if self.openai_client:
            openai.api_key = Config.OPENAI_API_KEY
        self.conversations = {}
        
    async def get_text_response(self, user_id: int, message: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI"""
        start_time = datetime.now()
        
        try:
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            if user_id not in self.conversations:
                self.conversations[user_id] = []
            
            self.conversations[user_id].append({"role": "user", "content": message})
            
            if len(self.conversations[user_id]) > 10:
                self.conversations[user_id] = self.conversations[user_id][-10:]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Groq (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
            if self.groq_client:
                response = self.groq_client.chat.completions.create(
                    model=Config.TEXT_MODEL,
                    messages=[
                        {"role": "system", "content": "–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –ø–æ–ª–µ–∑–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."},
                        *self.conversations[user_id]
                    ],
                    max_tokens=1000,
                    temperature=0.7
                )
                ai_response = response.choices[0].message.content
                tokens = response.usage.total_tokens if hasattr(response, 'usage') else 0
            
            # Fallback –Ω–∞ OpenAI –µ—Å–ª–∏ Groq –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            elif self.openai_client:
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=self.conversations[user_id],
                    max_tokens=1000
                )
                ai_response = response.choices[0].message.content
                tokens = response.usage.total_tokens
            else:
                ai_response = "‚ùå AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏."
                tokens = 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            self.conversations[user_id].append({"role": "assistant", "content": ai_response})
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ –ë–î
            response_time = (datetime.now() - start_time).total_seconds()
            self.db.log_message(user_id, "text", message, ai_response, tokens, response_time)
            
            return ai_response
            
        except Exception as e:
            logging.error(f"AI Error: {e}")
            return "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    async def generate_image(self, user_id: int, prompt: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ DALL-E"""
        if not self.openai_client:
            return None, "‚ùå –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω—É–∂–µ–Ω OpenAI API –∫–ª—é—á"
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            response = openai.Image.create(
                model=Config.IMAGE_MODEL,
                prompt=prompt,
                size="1024x1024",
                quality="standard",
                n=1
            )
            
            image_url = response.data[0].url
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_data = requests.get(image_url).content
            filename = f"{uuid.uuid4()}.png"
            filepath = Config.IMAGES_DIR / filename
            
            with open(filepath, 'wb') as f:
                f.write(image_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            cursor = self.db.conn.cursor()
            cursor.execute('''
                INSERT INTO generated_images (user_id, prompt, image_url, file_path)
                VALUES (?, ?, ?, ?)
            ''', (user_id, prompt, image_url, str(filepath)))
            self.db.conn.commit()
            
            return filepath, "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!"
            
        except Exception as e:
            logging.error(f"Image generation error: {e}")
            return None, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
    
    async def transcribe_voice(self, file_path: str) -> str:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ Whisper"""
        if not self.openai_client:
            return "‚ùå –î–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ –Ω—É–∂–µ–Ω OpenAI API –∫–ª—é—á"
        
        try:
            with open(file_path, "rb") as audio_file:
                transcript = openai.Audio.transcribe(
                    model=Config.VOICE_MODEL,
                    file=audio_file,
                    language="ru"  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                )
            return transcript.text
        except Exception as e:
            logging.error(f"Voice transcription error: {e}")
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å"
    
    def text_to_speech(self, text: str, language: str = 'ru') -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –≥–æ–ª–æ—Å"""
        try:
            tts = gTTS(text=text, lang=language, slow=False)
            filename = f"{uuid.uuid4()}.mp3"
            filepath = Config.VOICE_DIR / filename
            tts.save(str(filepath))
            return filepath
        except Exception as e:
            logging.error(f"TTS error: {e}")
            return None

# ==================== PDF –ì–ï–ù–ï–†–ê–¢–û–† ====================
class PDFGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö PDF –æ—Ç—á–µ—Ç–æ–≤"""
    
    @staticmethod
    def generate_chat_export(user_id: int, chat_history: list, user_info: dict) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞ –≤ PDF"""
        filename = f"chat_export_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = Config.EXPORTS_DIR / filename
        
        # –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
        doc = SimpleDocTemplate(
            str(filepath),
            pagesize=A4,
            rightMargin=72,
            leftMargin=72,
            topMargin=72,
            bottomMargin=18,
        )
        
        # –°—Ç–∏–ª–∏
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            textColor=colors.HexColor('#1f2937'),
            spaceAfter=30,
            alignment=TA_CENTER
        )
        
        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
        story = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        story.append(Paragraph(f"üìä –≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞ - {Config.BUSINESS_NAME}", title_style))
        story.append(Spacer(1, 20))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_data = [
            ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user_info.get('first_name', 'Unknown')],
            ['Username:', f"@{user_info.get('username', 'none')}"],
            ['User ID:', str(user_id)],
            ['–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', datetime.now().strftime('%d.%m.%Y %H:%M')]
        ]
        
        user_table = Table(user_data, colWidths=[120, 350])
        user_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#e5e7eb')),
            ('TEXTCOLOR', (0, 0), (-1, -1), colors.HexColor('#1f2937')),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#d1d5db'))
        ]))
        
        story.append(user_table)
        story.append(Spacer(1, 30))
        
        # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
        story.append(Paragraph("üí¨ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞", styles['Heading2']))
        story.append(Spacer(1, 20))
        
        for message, response, timestamp in chat_history:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            story.append(Paragraph(f"<b>üë§ –í—ã ({timestamp}):</b>", styles['Normal']))
            story.append(Paragraph(message or "...", styles['Normal']))
            story.append(Spacer(1, 10))
            
            # –û—Ç–≤–µ—Ç –±–æ—Ç–∞
            if response:
                story.append(Paragraph(f"<b>ü§ñ {Config.BUSINESS_NAME}:</b>", styles['Normal']))
                story.append(Paragraph(response, styles['Normal']))
                story.append(Spacer(1, 20))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        doc.build(story)
        
        return filepath

# ==================== WEB –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ====================
class AdminPanel:
    """–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    def __init__(self, db: Database):
        self.db = db
        self.app = Flask(__name__)
        self.app.secret_key = Config.SECRET_KEY
        CORS(self.app)
        self.setup_routes()
        
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        
        @self.app.route('/')
        def index():
            if 'admin_logged_in' not in session:
                return redirect(url_for('login'))
            return self.render_dashboard()
        
        @self.app.route('/login', methods=['GET', 'POST'])
        def login():
            if request.method == 'POST':
                password = request.form.get('password')
                if password == Config.ADMIN_PASSWORD:
                    session['admin_logged_in'] = True
                    return redirect(url_for('index'))
                return self.render_login(error="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
            return self.render_login()
        
        @self.app.route('/logout')
        def logout():
            session.pop('admin_logged_in', None)
            return redirect(url_for('login'))
        
        @self.app.route('/api/stats')
        def api_stats():
            if 'admin_logged_in' not in session:
                return jsonify({'error': 'Unauthorized'}), 401
            return jsonify(self.db.get_stats())
        
        @self.app.route('/api/users')
        def api_users():
            if 'admin_logged_in' not in session:
                return jsonify({'error': 'Unauthorized'}), 401
            
            cursor = self.db.conn.cursor()
            cursor.execute('''
                SELECT user_id, username, first_name, last_active, 
                       (SELECT COUNT(*) FROM messages WHERE user_id = users.user_id) as msg_count
                FROM users
                ORDER BY last_active DESC
                LIMIT 100
            ''')
            users = cursor.fetchall()
            
            return jsonify([{
                'user_id': u[0],
                'username': u[1],
                'first_name': u[2],
                'last_active': u[3],
                'messages': u[4]
            } for u in users])
        
        @self.app.route('/broadcast', methods=['POST'])
        def broadcast():
            if 'admin_logged_in' not in session:
                return jsonify({'error': 'Unauthorized'}), 401
            
            message = request.json.get('message')
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ Telegram API
            return jsonify({'status': 'Message queued for broadcast'})
    
    def render_login(self, error=None):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞"""
        return render_template_string('''
        <!DOCTYPE html>
        <html>
        <head>
            <title>Admin Login - {{ business_name }}</title>
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                * { margin: 0; padding: 0; box-sizing: border-box; }
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
                .login-container {
                    background: white;
                    padding: 2rem;
                    border-radius: 1rem;
                    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
                    width: 90%;
                    max-width: 400px;
                }
                h1 {
                    color: #1f2937;
                    margin-bottom: 2rem;
                    text-align: center;
                }
                .form-group {
                    margin-bottom: 1.5rem;
                }
                label {
                    display: block;
                    color: #6b7280;
                    margin-bottom: 0.5rem;
                    font-size: 0.875rem;
                }
                input {
                    width: 100%;
                    padding: 0.75rem;
                    border: 1px solid #d1d5db;
                    border-radius: 0.5rem;
                    font-size: 1rem;
                }
                input:focus {
                    outline: none;
                    border-color: #667eea;
                    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
                }
                button {
                    width: 100%;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 0.75rem;
                    border: none;
                    border-radius: 0.5rem;
                    font-size: 1rem;
                    font-weight: 600;
                    cursor: pointer;
                    transition: transform 0.2s;
                }
                button:hover {
                    transform: translateY(-2px);
                }
                .error {
                    background: #fee;
                    color: #c00;
                    padding: 0.75rem;
                    border-radius: 0.5rem;
                    margin-bottom: 1rem;
                    text-align: center;
                }
                .logo {
                    text-align: center;
                    font-size: 3rem;
                    margin-bottom: 1rem;
                }
            </style>
        </head>
        <body>
            <div class="login-container">
                <div class="logo">ü§ñ</div>
                <h1>{{ business_name }} Admin</h1>
                {% if error %}
                <div class="error">{{ error }}</div>
                {% endif %}
                <form method="POST">
                    <div class="form-group">
                        <label for="password">–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</label>
                        <input type="password" id="password" name="password" required autofocus>
                    </div>
                    <button type="submit">–í–æ–π—Ç–∏</button>
                </form>
            </div>
        </body>
        </html>
        ''', business_name=Config.BUSINESS_NAME, error=error)
    
    def render_dashboard(self):
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏"""
        stats = self.db.get_stats()
        return render_template_string('''
        <!DOCTYPE html>
        <html>
        <head>
            <title>Admin Dashboard - {{ business_name }}</title>
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                * { margin: 0; padding: 0; box-sizing: border-box; }
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: #f3f4f6;
                }
                .header {
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 1.5rem;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                }
                .header-content {
                    max-width: 1200px;
                    margin: 0 auto;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }
                .header h1 {
                    font-size: 1.5rem;
                }
                .logout-btn {
                    background: rgba(255,255,255,0.2);
                    color: white;
                    padding: 0.5rem 1rem;
                    border-radius: 0.5rem;
                    text-decoration: none;
                    transition: background 0.2s;
                }
                .logout-btn:hover {
                    background: rgba(255,255,255,0.3);
                }
                .container {
                    max-width: 1200px;
                    margin: 2rem auto;
                    padding: 0 1rem;
                }
                .stats-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                    gap: 1.5rem;
                    margin-bottom: 2rem;
                }
                .stat-card {
                    background: white;
                    padding: 1.5rem;
                    border-radius: 0.75rem;
                    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                }
                .stat-card h3 {
                    color: #6b7280;
                    font-size: 0.875rem;
                    font-weight: 500;
                    margin-bottom: 0.5rem;
                    text-transform: uppercase;
                }
                .stat-card .value {
                    color: #1f2937;
                    font-size: 2rem;
                    font-weight: 700;
                }
                .stat-card .change {
                    color: #10b981;
                    font-size: 0.875rem;
                    margin-top: 0.5rem;
                }
                .section {
                    background: white;
                    padding: 1.5rem;
                    border-radius: 0.75rem;
                    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                    margin-bottom: 2rem;
                }
                .section h2 {
                    color: #1f2937;
                    margin-bottom: 1rem;
                    padding-bottom: 0.5rem;
                    border-bottom: 2px solid #e5e7eb;
                }
                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                th, td {
                    text-align: left;
                    padding: 0.75rem;
                    border-bottom: 1px solid #e5e7eb;
                }
                th {
                    background: #f9fafb;
                    font-weight: 600;
                    color: #6b7280;
                    font-size: 0.875rem;
                }
                .btn {
                    background: #667eea;
                    color: white;
                    padding: 0.5rem 1rem;
                    border: none;
                    border-radius: 0.5rem;
                    cursor: pointer;
                    font-size: 0.875rem;
                    transition: background 0.2s;
                }
                .btn:hover {
                    background: #5a67d8;
                }
                .broadcast-form {
                    display: flex;
                    gap: 1rem;
                    margin-top: 1rem;
                }
                .broadcast-form textarea {
                    flex: 1;
                    padding: 0.75rem;
                    border: 1px solid #d1d5db;
                    border-radius: 0.5rem;
                    resize: vertical;
                    min-height: 100px;
                }
            </style>
        </head>
        <body>
            <div class="header">
                <div class="header-content">
                    <h1>ü§ñ {{ business_name }} - Admin Panel</h1>
                    <a href="/logout" class="logout-btn">–í—ã–π—Ç–∏</a>
                </div>
            </div>
            
            <div class="container">
                <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
                <div class="stats-grid">
                    <div class="stat-card">
                        <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                        <div class="value">{{ stats.total_users }}</div>
                        <div class="change">+{{ stats.active_today }} —Å–µ–≥–æ–¥–Ω—è</div>
                    </div>
                    <div class="stat-card">
                        <h3>–°–æ–æ–±—â–µ–Ω–∏—è</h3>
                        <div class="value">{{ stats.total_messages }}</div>
                    </div>
                    <div class="stat-card">
                        <h3>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</h3>
                        <div class="value">{{ stats.total_images }}</div>
                    </div>
                    <div class="stat-card">
                        <h3>–ì–æ–ª–æ—Å–æ–≤—ã–µ</h3>
                        <div class="value">{{ stats.total_voice }}</div>
                    </div>
                </div>
                
                <!-- –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ -->
                <div class="section">
                    <h2>üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h2>
                    <table>
                        <thead>
                            <tr>
                                <th>Username</th>
                                <th>–°–æ–æ–±—â–µ–Ω–∏–π</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for user in stats.top_users %}
                            <tr>
                                <td>@{{ user[0] or 'anonymous' }}</td>
                                <td>{{ user[1] }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
                
                <!-- –†–∞—Å—Å—ã–ª–∫–∞ -->
                <div class="section">
                    <h2>üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</h2>
                    <div class="broadcast-form">
                        <textarea id="broadcast-message" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º..."></textarea>
                        <button class="btn" onclick="sendBroadcast()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                    </div>
                </div>
            </div>
            
            <script>
                function sendBroadcast() {
                    const message = document.getElementById('broadcast-message').value;
                    if (!message.trim()) {
                        alert('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
                        return;
                    }
                    
                    fetch('/broadcast', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({message: message})
                    })
                    .then(res => res.json())
                    .then(data => {
                        alert('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!');
                        document.getElementById('broadcast-message').value = '';
                    });
                }
                
                // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                setInterval(() => {
                    fetch('/api/stats')
                        .then(res => res.json())
                        .then(data => {
                            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                            console.log('Stats updated:', data);
                        });
                }, 30000);  // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            </script>
        </body>
        </html>
        ''', business_name=Config.BUSINESS_NAME, stats=stats)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.app.run(host='0.0.0.0', port=Config.WEB_PORT, debug=False)

# ==================== TELEGRAM –ë–û–¢ ====================
class MegaBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ —Å–æ –≤—Å–µ–º–∏ —Ñ–∏—á–∞–º–∏"""
    
    def __init__(self):
        self.db = Database()
        self.ai = AIManager(self.db)
        self.pdf = PDFGenerator()
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        self.db.add_user(user.to_dict())
        
        keyboard = [
            [
                InlineKeyboardButton("üí¨ –ß–∞—Ç —Å AI", callback_data="chat"),
                InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏", callback_data="image")
            ],
            [
                InlineKeyboardButton("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="voice"),
                InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞", callback_data="export")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
                InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        
        welcome = f"""
üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {Config.BUSINESS_NAME}!**

–Ø - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI-–±–æ—Ç —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:

‚ú® **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üí¨ –£–º–Ω—ã–π —á–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (DALL-E 3)
‚Ä¢ üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ (Whisper)
‚Ä¢ üîä –û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ üìÑ –≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–æ–≤ –≤ PDF
‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ üåê –í–µ–±-–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!
"""
        
        await update.message.reply_text(
            welcome,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message = update.message.text
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.add_user(user.to_dict())
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
        await update.message.reply_chat_action("typing")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        response = await self.ai.get_text_response(user.id, message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(response)
    
    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        voice = update.message.voice
        
        await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(voice.file_id)
        voice_path = Config.VOICE_DIR / f"{voice.file_id}.ogg"
        await file.download_to_drive(voice_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ mp3 –¥–ª—è Whisper
        mp3_path = voice_path.with_suffix('.mp3')
        audio = AudioSegment.from_ogg(voice_path)
        audio.export(mp3_path, format="mp3")
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
        text = await self.ai.transcribe_voice(str(mp3_path))
        
        if text.startswith("‚ùå"):
            await update.message.reply_text(text)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        cursor = self.db.conn.cursor()
        cursor.execute('''
            INSERT INTO voice_messages (user_id, file_id, transcription, duration)
            VALUES (?, ?, ?, ?)
        ''', (user.id, voice.file_id, text, voice.duration))
        self.db.conn.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        await update.message.reply_text(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{text}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        await update.message.reply_chat_action("typing")
        response = await self.ai.get_text_response(user.id, text)
        await update.message.reply_text(f"ü§ñ –û—Ç–≤–µ—Ç:\n\n{response}")
        
        # –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if len(response) < 500:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –æ–∑–≤—É—á–∫–∏
            voice_file = self.ai.text_to_speech(response)
            if voice_file:
                with open(voice_file, 'rb') as audio:
                    await update.message.reply_voice(voice=audio)
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        
        if query.data == "chat":
            await query.message.reply_text("üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
            
        elif query.data == "image":
            if not Config.OPENAI_API_KEY:
                await query.message.reply_text("‚ùå –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω—É–∂–µ–Ω OpenAI API –∫–ª—é—á")
                return
            
            await query.message.reply_text(
                "üé® –û–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å.\n\n"
                "–ü—Ä–∏–º–µ—Ä: _–ö–æ—Ç-–∞—Å—Ç—Ä–æ–Ω–∞–≤—Ç –≤ –∫–æ—Å–º–æ—Å–µ –≤ —Å—Ç–∏–ª–µ Van Gogh_",
                parse_mode="Markdown"
            )
            context.user_data['waiting_for_image_prompt'] = True
            
        elif query.data == "voice":
            await query.message.reply_text(
                "üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –æ—Ç–≤–µ—á—É!"
            )
            
        elif query.data == "export":
            await query.message.reply_text("üìÑ –ì–æ—Ç–æ–≤–ª—é PDF —Å –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            chat_history = self.db.get_chat_history(user.id)
            
            if not chat_history:
                await query.message.reply_text("‚ùå –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞")
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
            pdf_path = self.pdf.generate_chat_export(
                user.id, 
                chat_history,
                user.to_dict()
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(pdf_path, 'rb') as pdf_file:
                await query.message.reply_document(
                    document=pdf_file,
                    filename=pdf_path.name,
                    caption="‚úÖ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –≤ PDF —Ñ–æ—Ä–º–∞—Ç–µ!"
                )
            
        elif query.data == "stats":
            stats = self.db.get_stats()
            stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}
üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats['total_images']}
üé§ –ì–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_voice']}
üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['active_today']}

üèÜ **–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
"""
            for i, (username, count) in enumerate(stats['top_users'][:3], 1):
                stats_text += f"\n{i}. @{username or 'anonymous'}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π"
            
            if user.id == Config.ADMIN_ID:
                stats_text += f"\n\nüîó [–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å](http://localhost:{Config.WEB_PORT})"
            
            await query.message.reply_text(stats_text, parse_mode="Markdown")
            
        elif query.data == "help":
            help_text = """
üìö **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞**

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/export - –≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞ –≤ PDF
/admin - –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**

üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**
–û–ø–∏—à–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∏ —è —Å–æ–∑–¥–∞–º –µ—ë —Å –ø–æ–º–æ—â—å—é DALL-E 3

üé§ **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –æ—Ç–≤–µ—á—É

üìÑ **–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF:**
–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ –∫—Ä–∞—Å–∏–≤–æ–º PDF

üåê **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:**
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º

üí° **–°–æ–≤–µ—Ç:** –ë–æ—Ç –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞!
"""
            await query.message.reply_text(help_text, parse_mode="Markdown")
    
    async def handle_message_with_image_prompt(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if context.user_data.get('waiting_for_image_prompt'):
            user = update.effective_user
            prompt = update.message.text
            
            await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –≠—Ç–æ –∑–∞–π–º–µ—Ç 10-20 —Å–µ–∫—É–Ω–¥")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_path, message = await self.ai.generate_image(user.id, prompt)
            
            if image_path:
                with open(image_path, 'rb') as img:
                    await update.message.reply_photo(
                        photo=img,
                        caption=f"‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n_{prompt}_",
                        parse_mode="Markdown"
                    )
            else:
                await update.message.reply_text(message)
            
            context.user_data['waiting_for_image_prompt'] = False
        else:
            await self.handle_text(update, context)
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /admin"""
        user = update.effective_user
        
        if user.id != Config.ADMIN_ID:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        admin_text = f"""
üîê **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:{Config.WEB_PORT}
üîë –ü–∞—Ä–æ–ª—å: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ADMIN_PASSWORD

**–§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:**
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö

**API endpoints:**
‚Ä¢ /api/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ /api/users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ /broadcast - –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
"""
        await update.message.reply_text(admin_text, parse_mode="Markdown")
    
    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
        user = update.effective_user
        
        if user.id in self.ai.conversations:
            del self.ai.conversations[user.id]
        
        await update.message.reply_text("üîÑ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞! –ù–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.")
    
    async def export_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞ –≤ PDF"""
        user = update.effective_user
        
        await update.message.reply_text("üìÑ –ì–æ—Ç–æ–≤–ª—é PDF —Å –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        chat_history = self.db.get_chat_history(user.id)
        
        if not chat_history:
            await update.message.reply_text("‚ùå –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        pdf_path = self.pdf.generate_chat_export(
            user.id, 
            chat_history,
            user.to_dict()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(pdf_path, 'rb') as pdf_file:
            await update.message.reply_document(
                document=pdf_file,
                filename=pdf_path.name,
                caption="‚úÖ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –≤ PDF —Ñ–æ—Ä–º–∞—Ç–µ!"
            )

# ==================== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ====================
def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not Config.TELEGRAM_TOKEN:
        logging.error("‚ùå TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    if not Config.GROQ_API_KEY and not Config.OPENAI_API_KEY:
        logging.warning("‚ö†Ô∏è –ù–µ—Ç API –∫–ª—é—á–µ–π –¥–ª—è AI. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GROQ_API_KEY (–±–µ—Å–ø–ª–∞—Ç–Ω–æ) –∏–ª–∏ OPENAI_API_KEY")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    bot = MegaBot()
    
    # –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    admin_panel = AdminPanel(bot.db)
    admin_thread = threading.Thread(target=admin_panel.run, daemon=True)
    admin_thread.start()
    logging.info(f"üåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ http://localhost:{Config.WEB_PORT}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Application.builder().token(Config.TELEGRAM_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(CommandHandler("admin", bot.admin_command))
    app.add_handler(CommandHandler("clear", bot.clear_command))
    app.add_handler(CommandHandler("export", bot.export_command))
    app.add_handler(CommandHandler("stats", lambda u, c: bot.button_handler(u, c)))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        bot.handle_message_with_image_prompt
    ))
    app.add_handler(MessageHandler(filters.VOICE, bot.handle_voice))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(bot.button_handler))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logging.info(f"üöÄ {Config.BUSINESS_NAME} –∑–∞–ø—É—â–µ–Ω!")
    logging.info(f"üí¨ Groq AI: {'‚úÖ' if Config.GROQ_API_KEY else '‚ùå'}")
    logging.info(f"üé® DALL-E: {'‚úÖ' if Config.OPENAI_API_KEY else '‚ùå'}")
    logging.info(f"üé§ Whisper: {'‚úÖ' if Config.OPENAI_API_KEY else '‚ùå'}")
    
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
